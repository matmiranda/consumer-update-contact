name: .NET CI Pipeline

on:
  push:
    branches:
      - main
      - develop
      - feature/*
  pull_request:
    branches:
      - main

permissions:
  id-token: write  # Permissões para gerar o id-token

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 9.0.x

      - name: Restore dependencies
        run: dotnet restore Consumer.Contact.Update.sln

      - name: Build
        run: dotnet build Consumer.Contact.Update.sln --configuration Release

      - name: Set Environment Variables
        run: |
          echo "RABBITMQSETTINGS__HOST=localhost" >> $GITHUB_ENV
          echo "RABBITMQSETTINGS__USERNAME=guest" >> $GITHUB_ENV
          echo "RABBITMQSETTINGS__PASSWORD=guest" >> $GITHUB_ENV

      - name: Run Unit Tests        
        run: dotnet test Consumer.Contact.Update.Tests/Consumer.Contact.Update.Tests.csproj --configuration Release --logger "console;verbosity=detailed"

      - name: Publish
        run: dotnet publish Consumer.Contact.Update.Worker/Consumer.Contact.Update.Worker.csproj --configuration Release --output Consumer.Contact.Update.Worker/publish

      # --- Adicionando as etapas de Docker, ACR e AKS ---
      - name: Azure Login
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Log in to Azure CLI (Using Managed Identity)
        run: |
          az aks get-credentials --resource-group ${{ secrets.AKS_RESOURCE_GROUP }} --name ${{ secrets.AKS_CLUSTER_NAME }}

      - name: Verificar se o cluster Kubernetes está acessível
        run: |
          if kubectl cluster-info; then
            echo "Cluster Kubernetes está acessível"
          else
            echo "Falha ao acessar o cluster Kubernetes"
            exit 1
          fi

      - name: Log in to Azure Container Registry (ACR)
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build Docker image
        run: |
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/consumer-criar-contatos:latest -f Consumer.Contact.Update.Worker/Dockerfile .

      - name: Push Docker image to ACR
        run: |
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/consumer-criar-contatos:latest

      - name: Set AKS context
        uses: azure/aks-set-context@v3
        with:
          resource-group: '${{ secrets.AKS_RESOURCE_GROUP }}'
          cluster-name: '${{ secrets.AKS_CLUSTER_NAME }}'

      - name: Update Kubernetes Resources
        run: |
          # Aplica ConfigMap (cria ou atualiza se necessário)
          kubectl apply -f Consumer.Contact.Update.Worker/k8s/consumer-criar-contatos-configmap.yml

          # Aplica Deployment (cria ou atualiza se necessário)
          kubectl apply -f Consumer.Contact.Update.Worker/k8s/consumer-criar-contatos-deployment.yml

          # Aplica PVC e PV (apenas cria ou atualiza, sem deletar)
          kubectl apply -f Consumer.Contact.Update.Worker/k8s/consumer-criar-contatos-persistent-volume.yml
          kubectl apply -f Consumer.Contact.Update.Worker/k8s/consumer-criar-contatos-persistent-volume-claim.yml

          # Aplica Service (cria ou atualiza se necessário)
          kubectl apply -f Consumer.Contact.Update.Worker/k8s/consumer-criar-contatos-service.yml

          # Espera o rollout do Deployment para garantir que a atualização foi bem-sucedida
          kubectl rollout status deployment/consumer-criar-contatos-deployment
      
      - name: Update AKS Deployment with new image
        uses: azure/k8s-deploy@v1
        with:
          manifests: |
            Consumer.Contact.Update.Worker/k8s/consumer-criar-contatos-deployment.yml
            Consumer.Contact.Update.Worker/k8s/consumer-criar-contatos-service.yml
          images: |
            ${{ secrets.ACR_LOGIN_SERVER }}/consumer-criar-contatos:latest
          imagepullsecrets: |
            acr-auth

      - name: Cleanup
        if: always()
        run: |
          docker rm -f rabbitmq || true
          docker volume prune -f
